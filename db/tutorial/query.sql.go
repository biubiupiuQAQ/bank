// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package tutorial

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO account (
    account_name,
    balance,
    currency
) VALUES (?,?,?)
`

type CreateAccountParams struct {
	AccountName string
	Balance     int64
	Currency    string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount, arg.AccountName, arg.Balance, arg.Currency)
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE id = ?
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, account_name, balance, currency, created_at FROM account
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, account_name, balance, currency, created_at FROM account
WHERE id = ?
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListAccountsParams struct {
	ID     int64
	Limit  int32
	Offset int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.AccountName,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :execresult
UPDATE account
SET balance = ?
WHERE id = ?
`

type UpdateAccountParams struct {
	Balance int64
	ID      int64
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAccount, arg.Balance, arg.ID)
}
